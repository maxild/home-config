let mapleader = ","

""" Plugins  --------------------------------
"set surround
"set multiple-cursors
"set commentary
"set argtextobj
"set easymotion
"set textobj-entire
"set ReplaceWithRegister
"set exchange
"set highlightedyank     " Highlight after copying in vim mode
"set vim-paragraph-motion

" Trying the new syntax (Plug '<plugin-github-reference>')
" See https://github.com/JetBrains/ideavim/blob/master/doc/IdeaVim%20Plugins.md
Plug 'easymotion/vim-easymotion'    # Requires IdeaVim-EasyMotion and AceJump. Lots of mappings
Plug 'kana/vim-textobj-entire'      # entire buffer text object: ae
Plug 'machakann/vim-highlightedyank'
Plug 'terryma/vim-multiple-cursors' # See below for remapped keys. <A-n> doesn't work on Mac
Plug 'tommcdo/vim-exchange'         # cx{motion} to select, again to exchange
Plug 'tpope/vim-commentary'         # [count]gc{motion}, o_gc, v_gc, gcc
Plug 'tpope/vim-surround'           # ys, cs, ds, S
Plug 'vim-scripts/argtextobj.vim'       # argument text objects: aa, ia
Plug 'vim-scripts/ReplaceWithRegister'  # [count]["x]gr{motion}, [count]["x]grr, {Visual}["x]gr
Plug 'dbakker/vim-paragraph-motion'

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"
let g:highlightedyank_highlight_duration = "5000"
let g:highlightedyank_highlight_color = "rgba(57, 62, 65, 255)"

""" Common settings -------------------------
set showmode
set scrolloff=5     " 5 lines above/below cursor when scrolling
set incsearch
set nrformats-=octal
set nu
set ignorecase
set smartcase

set relativenumber
set number

set hlsearch
set visualbell
set noerrorbells

" Integrate with system clipboard
" On Mac OS X and Windows, the * and + registers both point to the system clipboard
" so unnamed and unnamedplus have the same effect: the unnamed register is synchronized
" with the system clipboard.
" On Linux, you have essentially two clipboards: one is pretty much the same as in
" the other OSes (Ctrl+C and Ctrl+V in other programs, mapped to register + in Vim),
" the other is the "selection" clipboard (mapped to register * in Vim).
" Note: ^= prepends, += appends (to string option)
set clipboard^=unnamedplus,unnamed
"set clipboard+=unnamed
"set clipboard+=ideaput

""" Idea specific settings ------------------
set ideajoin                " Smart join for <C-J>
set ideastatusicon=gray
set ideamarks               " Map vim marks to IDEA global marks

"-------------------------------------- sethandler
" Shortcut Conflicts for custom keymap

sethandler <S-Space> a:ide
sethandler <C-2> a:ide
sethandler <C-S-2> a:ide
sethandler <C-6> a:ide
sethandler <C-S-6> a:ide
sethandler <C-a> a:ide
sethandler <C-b> a:ide
sethandler <C-c> a:ide
sethandler <C-d> a:ide
sethandler <C-e> a:ide
sethandler <C-f> a:ide
sethandler <C-g> a:ide
sethandler <C-h> a:ide
sethandler <C-i> a:ide
"sethandler <C-i> a:vim
sethandler <C-j> a:ide
sethandler <C-k> a:ide
sethandler <C-l> a:ide
sethandler <C-m> a:ide
sethandler <C-n> a:ide
sethandler <C-o> a:ide
sethandler <C-p> a:ide
sethandler <C-q> a:ide
sethandler <C-r> a:ide
sethandler <C-s> a:ide
sethandler <C-t> a:ide
sethandler <C-u> a:ide
sethandler <C-v> a:ide
sethandler <C-w> a:ide
sethandler <C-x> a:ide
sethandler <C-y> a:ide
sethandler <C-\> a:ide

"-------------------------------------- Keymaps
" Syntax in vim script to execuye IDE Actions
" <Action>({action_id})
" :action {action_id}
" NOTE: :action {action_id} is a command to be typed at the command line,
"       i.e. the user types : and then action, the name of the IDE action
"       and finally <CR> will invoke it. This can also be used in mappings,
"       but it requires either already being in normal mode (so : will work)
"       or requires changing mode, which can have problems with state and
"       context and can cause issues with invoking the action successfully.
" Example:
"           nmap + <Action>(EditorIncreaseFontSize)
" NOTE: Mappings to <Action> don't work with noremap.
"       That is: It's also very important to use the recursive nmap.
"       If you use nnoremap, then + will map to the literal key sequence
"       <Action>(EditorIncreaseFontSize), and won't be recursively mapped
"       to the IDE action.
" NOTE: Please don't use :action in mappings. Use <Action> instead.
" See https://github.com/JetBrains/ideavim/discussions/303?sort=new#discussioncomment-4508992

" OSX has special characters that are mapped to option+key. BUT we try using Unicode Hex Input
"map <C-N>  <A-N>
"map <C-P>  <A-P>
"map <C-X>  <A-X>
"map g<C-N> g<A-N>

" Repeat IDEA keymap to fight conflicts
map <C-Up> <Action>(EditorSelectWord)
map <C-Down> <Action>(EditorUnSelectWord)

" =======================================

" jk as a better Esc to get back to normal mode
imap jk <Esc>
vmap jk <Esc>

" Impaired actions with [ and ] namespacing
" =========================================

" These create newlines like o and O but stay in normal mode
nnoremap [<space> O<Esc>j
nnoremap ]<space> o<Esc>k

" multiple cursors
nnoremap [f :action PreviousOccurence<CR>
nnoremap ]f :action NextOccurence<CR>
map <M-n> <Plug>NextWholeOccurrence
"nmap <C-n> <Plug>NextWholeOccurrence
"xmap <C-n> <Plug>NextWholeOccurrence
"nmap g<C-n> <Plug>NextOccurrence
"xmap g<C-n> <Plug>NextOccurrence
"xmap <C-x> <Plug>SkipOccurrence
"xmap <C-p> <Plug>RemoveOccurrence

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
"nmap <C-n> <Plug>NextWholeOccurrence
"xmap <C-n> <Plug>NextWholeOccurrence
"nmap g<C-n> <Plug>NextOccurrence
"xmap g<C-n> <Plug>NextOccurrence
"xmap <C-x> <Plug>SkipOccurrence
"xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
"nmap <leader><C-n> <Plug>AllWholeOccurrences
"xmap <leader><C-n> <Plug>AllWholeOccurrences
"nmap <leader>g<C-n> <Plug>AllOccurrences
"xmap <leader>g<C-n> <Plug>AllOccurrences

" method up/down
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" line up/down
nnoremap [l :action MoveLineUp<CR>
nnoremap ]l :action MoveLineDown<CR>
"vmap <S-J> <Action>(MoveLineDown)
"vmap <S-K> <Action>(MoveLineUp)

" statement up/down
nnoremap [s :action MoveStatementUp<CR>
nnoremap ]s :action MoveStatementDown<CR>

" Move Between Bookmarks
nmap ]b <Action>(GotoNextBookmark)
nmap [b <Action>(GotoPreviousBookmark)

" Move between changes in current file
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
" ={motion} is for indenting. =c does nothing
nmap =c <Action>(VcsShowCurrentChangeMarker)

" Errors: Move between issues (errors, warnings etc) in current file
"nmap ]e <Action>(GotoNextError)
"nmap [e <Action>(GotoPreviousError)
"nmap <leader>d <Action>(ShowErrorDescription)
nmap <Space> <Action>(GotoNextError)
"map <S-Space> <Action>(GotoNextError)
nmap <S-Space> <Action>(ReSharperGotoNextErrorInSolution) " Rider specific
"nmap <leader>x <Action>(GotoNextError)
"nmap <leader>X <Action>(GotoPreviousError)

" Splits manipulation
nmap <leader>ws <Action>(SplitHorizontally)
nmap <leader>wv <Action>(SplitVertically)
nmap <leader>wc <Action>(Unsplit)
nmap <leader>wC <Action>(UnsplitAll)
"nmap <leader>wd <Action>(OpenEditorInOppositeTabGroup)
"nmap <Leader>w :<Action>(JumpToLastWindow)

" Split windows
nmap sh :split <CR>
nmap sH <Action>(MoveTabDown)
nmap sv :vsplit <CR>
nmap sV <Action>(MoveTabRight)
nmap ss <Action>(MoveEditorToOppositeTabGroup)

" Move between split windows (Ctrl-W + h/j/k/l to navigate splits as in the original Vim)
"nmap <C-h> <C-w>h
"nmap <C-j> <C-w>j
"nmap <C-k> <C-w>k
"nmap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

" To navigate between split panes
nmap <leader>k <Action>(NextSplitter)
nmap <leader>j <Action>(PrevSplitter)

" Expand current split window
nmap so <Action>(MaximizeEditorInSplit)

" =====================================================

" jump lists
"nnoremap <C-i> :action Forward<CR>
"nnoremap <C-o> :action Back<CR>
" Otherwise we have to bypass it somehow by making Ctrl-O and Ctrl-I IDE
" shortcuts, instead of vim commands, and mapping them to Back/Forward in keymap.

" ========================================
"    Leader key based alternatives
" ========================================

nnoremap <leader><space> :nohlsearch<CR>

" Rename current file
nmap <leader>rf <Action>(RenameFile)

" toggle relative line numbers
nnoremap <leader>z :set relativenumber!<CR>

" These are leader-based alternative shortcuts for my most used actions
" whose corresponding idea shortcuts require hand-stretching combinations,
" function keys, Home or Insert

"nmap <leader>a <Action>(Switcher)

"nmap <leader>s <Action>(GotoSymbol)

"nmap <leader>g <Action>(GotoDeclaration)
"nmap <Leader>b <Action>(GotoDeclaration)

"nmap <leader>i <Action>(GotoImplementation)
"nmap <Leader>u <Action>(GotoSuperMethod)

"nmap <leader>t <Action>(GotoTest)

" Refactorings
"vmap T <Action>(Refactorings.QuickListPopupAction)
"nmap <leader>rr <Action>(RenameElement)
"nmap <Leader>r <Action>(RenameElement)
"nmap <leader>rI <Action>(OptimizeImports)
" Inspection
"nmap <leader>rc <Action>(InspectCode)

" Pretty print code
"nmap == <Action>(ReformatCode)

" Switches between .cc and .h file!
" nmap <leader>s <Action>(GotoRelated)

" File members
"nmap <leader>M <Action>(ActivateStructureToolWindow)
"nmap <leader>t <Action>(ExpressionTypeInfo)

" Usages
"nmap <leader>u <Action>(FindUsages)

" Bookmarks
"nmap <leader>b <Action>(ShowBookmarks)

" Use leader key sequences to access IDE commands
"nmap <leader>a <Action>($SelectAll)
"nmap <leader>b <Action>(GotoDeclaration)
"nmap <leader>c <Action>($Copy)
"nmap <leader>d <Action>(EditorDuplicate)
"nmap <leader>e <Action>(RecentFiles)
"nmap <leader>f <Action>(Find)
"nmap <leader>g <Action>(GotoLine)
"nmap <leader>h <Action>(TypeHierarchy)
"nmap <leader>i <Action>(ImplementMethods)
"nmap <leader>j <Action>
"nmap <leader>k <Action>
"nmap <leader>l <Action>
"nmap <leader>m <Action>(EditorScrollToCenter)
"nmap <leader>n <Action>(FileChooser.NewFolder)
"nmap <leader>n <Action>(SearchEverywhere)
"nmap <leader>o <Action>(OverrideMethods)
"nmap <leader>p <Action>(ParameterInfo)
"nmap <leader>q <Action>(QuickJavaDoc)
"nmap <leader>r <Action>(Replace)
"nmap <leader>s <Action>(SaveAll)
"nmap <leader>t <Action>(Vcs.UpdateProject)
"nmap <leader>u <Action>(GotoSuperMethod)
"nmap <leader>v <Action>($Paste)
"nmap <leader>w <Action>(EditorSelectWord)
"nmap <leader>x <Action>($Cut)
"nmap <leader>y <Action>(EditorDeleteLine)
"nmap <leader>z <Action>
"nmap <leader>[ <Action>(EditorCodeBlockStart)
"nmap <leader>] <Action>(EditorCodeBlockEnd)
"nmap <leader>\ <Action>

" ================================================
" VIM key notation:

" Key modifiers
" <C-?>          Control key plus some key
" <S-?>          Shift key plus some key
" <M-?> or <A-?> Alt key plus some key

" Special keys
" <BS>           Backspace
" <Tab>          Tab
" <CR>           Enter
" <Enter>        Enter
" <Return>       Enter
" <Esc>          Escape
" <Space>        Space
" <Up>           Up arrow
" <Down>         Down arrow
" <Left>         Left arrow
" <Right>        Right arrow
" <F1> - <F12>   Function keys 1 to 12
" #1, #2..#9,#0  Function keys F1 to F9, F10
" <Insert>       Insert
" <Del>          Delete
" <Home>         Home
" <End>          End
" <PageUp>       Page-Up
" <PageDown>     Page-Down
" <bar>          the '|' character, which otherwise needs to be escaped '\|'
