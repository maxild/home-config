let mapleader = ","

""" Plugins  --------------------------------
"set surround
"set multiple-cursors
"set commentary
"set argtextobj
"set easymotion
"set textobj-entire
"set ReplaceWithRegister
"set exchange
"set highlightedyank     " Highlight after copying in vim mode
"set vim-paragraph-motion

" Trying the new syntax (Plug '<plugin-github-reference>')
" See https://github.com/JetBrains/ideavim/blob/master/doc/IdeaVim%20Plugins.md
Plug 'easymotion/vim-easymotion'    # Requires IdeaVim-EasyMotion and AceJump. Lots of mappings
Plug 'kana/vim-textobj-entire'      # entire buffer text object: ae
Plug 'machakann/vim-highlightedyank'
Plug 'terryma/vim-multiple-cursors' # See below for remapped keys. <A-n> doesn't work on Mac
Plug 'tommcdo/vim-exchange'         # cx{motion} to select, again to exchange
Plug 'tpope/vim-commentary'         # [count]gc{motion}, o_gc, v_gc, gcc
Plug 'tpope/vim-surround'           # ys, cs, ds, S
Plug 'vim-scripts/argtextobj.vim'       # argument text objects: aa, ia
Plug 'vim-scripts/ReplaceWithRegister'  # [count]["x]gr{motion}, [count]["x]grr, {Visual}["x]gr
Plug 'dbakker/vim-paragraph-motion'

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"
let g:highlightedyank_highlight_duration = "5000"
let g:highlightedyank_highlight_color = "rgba(57, 62, 65, 255)"

""" Common settings -------------------------
set showmode
set scrolloff=5     " 5 lines above/below cursor when scrolling
set incsearch
set nrformats-=octal
set nu
set ignorecase
set smartcase

set relativenumber
set number

set hlsearch
set visualbell
set noerrorbells

" Integrate with system clipboard
" On Mac OS X and Windows, the * and + registers both point to the system clipboard
" so unnamed and unnamedplus have the same effect: the unnamed register is synchronized
" with the system clipboard.
" On Linux, you have essentially two clipboards: one is pretty much the same as in
" the other OSes (Ctrl+C and Ctrl+V in other programs, mapped to register + in Vim),
" the other is the "selection" clipboard (mapped to register * in Vim).
" Note: ^= prepends, += appends (to string option)
set clipboard^=unnamedplus,unnamed
"set clipboard+=unnamed
"set clipboard+=ideaput

""" Idea specific settings ------------------
set ideajoin                " Smart join for <C-J>
set ideastatusicon=gray
set ideamarks               " Map vim marks to IDEA global marks

"-------------------------------------- sethandler
" Shortcut Conflicts for custom keymap

sethandler <S-Space> a:ide
sethandler <C-2> a:ide
sethandler <C-S-2> a:ide
sethandler <C-6> a:ide
sethandler <C-S-6> a:ide
sethandler <C-a> a:ide
sethandler <C-b> a:ide
sethandler <C-c> a:ide
sethandler <C-d> a:ide
sethandler <C-e> a:ide
sethandler <C-f> a:ide
sethandler <C-g> a:ide
sethandler <C-h> a:ide
sethandler <C-i> a:ide
"sethandler <C-i> a:vim
sethandler <C-j> a:ide
sethandler <C-k> a:ide
sethandler <C-l> a:ide
sethandler <C-m> a:ide
sethandler <C-n> a:ide
sethandler <C-o> a:ide
sethandler <C-p> a:ide
sethandler <C-q> a:ide
sethandler <C-r> a:ide
sethandler <C-s> a:ide
sethandler <C-t> a:ide
sethandler <C-u> a:ide
sethandler <C-v> a:ide
sethandler <C-w> a:ide
sethandler <C-x> a:ide
sethandler <C-y> a:ide
sethandler <C-\> a:ide

"-------------------------------------- Keymaps

" OSX has special characters that are mapped to option+key. BUT we try using Unicode Hex Input
"map <C-N>  <A-N>
"map <C-P>  <A-P>
"map <C-X>  <A-X>
"map g<C-N> g<A-N>

" Repeat IDEA keymap to fight conflicts
map <C-Up> :action EditorSelectWord<CR>
map <C-Down> :action EditorUnSelectWord<CR>

" =======================================

" jk as a better Esc to get back to normal mode
imap jk <Esc>
vmap jk <Esc>

" Impaired actions with [ and ] namespacing
" =========================================

" These create newlines like o and O but stay in normal mode
nnoremap [<space> O<Esc>j
nnoremap ]<space> o<Esc>k

" multiple cursors
nnoremap [f :action PreviousOccurence<cr>
nnoremap ]f :action NextOccurence<cr>
map <M-n> <Plug>NextWholeOccurrence
"nmap <C-n> <Plug>NextWholeOccurrence
"xmap <C-n> <Plug>NextWholeOccurrence
"nmap g<C-n> <Plug>NextOccurrence
"xmap g<C-n> <Plug>NextOccurrence
"xmap <C-x> <Plug>SkipOccurrence
"xmap <C-p> <Plug>RemoveOccurrence

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
"nmap <C-n> <Plug>NextWholeOccurrence
"xmap <C-n> <Plug>NextWholeOccurrence
"nmap g<C-n> <Plug>NextOccurrence
"xmap g<C-n> <Plug>NextOccurrence
"xmap <C-x> <Plug>SkipOccurrence
"xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
"nmap <leader><C-n> <Plug>AllWholeOccurrences
"xmap <leader><C-n> <Plug>AllWholeOccurrences
"nmap <leader>g<C-n> <Plug>AllOccurrences
"xmap <leader>g<C-n> <Plug>AllOccurrences

" method up/down
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" line up/down
nnoremap [l :action MoveLineUp<cr>
nnoremap ]l :action MoveLineDown<cr>
"vmap <S-J> <Action>(MoveLineDown)
"vmap <S-K> <Action>(MoveLineUp)

" statement up/down
nnoremap [s :action MoveStatementUp<cr>
nnoremap ]s :action MoveStatementDown<cr>

" Move Between Bookmarks
nmap ]b <Action>(GotoNextBookmark)
nmap [b <Action>(GotoPreviousBookmark)

" Move between changes in current file
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
" ={motion} is for indenting. =c does nothing
nmap =c <Action>(VcsShowCurrentChangeMarker)

" Errors: Move between issues (errors, warnings etc) in current file
"nmap ]e <Action>(GotoNextError)
"nmap [e <Action>(GotoPreviousError)
"nmap <leader>d :action ShowErrorDescription<cr>
nmap <Space> <Action>(GotoNextError)
"map <S-Space> <Action>(GotoNextError)
nmap <S-Space> <Action>(ReSharperGotoNextErrorInSolution) " Rider specific
"nmap <leader>x :action GotoNextError<cr>
"nmap <leader>X :action GotoPreviousError<cr>

" To navigate between split panes
nmap <leader>k :action NextSplitter<cr>
nmap <leader>j :action PrevSplitter<cr>

" Splits manipulation
nmap <leader>ws :action SplitHorizontally<cr>
nmap <leader>wv :action SplitVertically<cr>
nmap <leader>wc :action Unsplit<cr>
nmap <leader>wC :action UnsplitAll<cr>
"nmap <leader>wd :action OpenEditorInOppositeTabGroup<cr>
"nmap <Leader>w :action JumpToLastWindow<CR>

" Split windows
nmap sh :split <CR>
nmap sH <Action>(MoveTabDown)
nmap sv :vsplit <CR>
nmap sV <Action>(MoveTabRight)
nmap ss <Action>(MoveEditorToOppositeTabGroup)

" Move between split windows
"nmap <C-h> <C-w>h
"nmap <C-j> <C-w>j
"nmap <C-k> <C-w>k
"nmap <C-l> <C-w>l

" Expand current split window
nmap so <Action>(MaximizeEditorInSplit)

" =====================================================

" IdeaVim uses 'a' for alt instead of Vim's 'm'
nnoremap <a-j> 15gj
nnoremap <a-k> 15gk

" Won't work in visual mode (with vmap) for some reason.
" Use default map of <c-/> for that.
nnoremap gcc :action CommentByLineComment<cr>

" Closing tabs
nnoremap <leader>q :action CloseContent<cr>
nnoremap <leader>Q :action ReopenClosedTab<cr>

" NOTE: 'unmap <C-a>' does not work in IdeaVim, but 'map <C-a>' does (it
" maps to nothing, BUT we still need to configure 'VIM Emulation' to use
" IDE action)
"
" incremenet number in source is not that interesting
" map <C-a> <Nop>

" jump lists
nnoremap <C-i> :action Forward<CR>
nnoremap <C-o> :action Back<CR>
" Otherwise we have to bypass it somehow by making Ctrl-O and Ctrl-I IDE
" shortcuts, instead of vim commands, and mapping them to Back/Forward in keymap.

" standard VIM mapping for GotoDeclaration
nnoremap <C-]> :action GotoDeclaration<CR>

" ========================================
"    Leader key based alternatives
" ========================================

nnoremap <leader><space> :nohlsearch<CR>

" Rename current file
nmap <leader>rf <Action>(RenameFile)

" toggle relative line numbers
nnoremap <leader>z :set relativenumber!<CR>

" These are leader-based alternative shortcuts for my most used actions
" whose corresponding idea shortcuts require hand-stretching combinations,
" function keys, Home or Insert

"nmap <leader>a :action Switcher<cr>

"nmap <leader>s :action GotoSymbol<cr>

"nmap <leader>g :action GotoDeclaration<cr>
"nmap <Leader>b :action GotoDeclaration<CR>

"nmap <leader>i :action GotoImplementation<cr>
"nmap <Leader>u :action GotoSuperMethod<CR>

"nmap <leader>t :action GotoTest<cr>

" Refactorings
"vmap T :action Refactorings.QuickListPopupAction<cr>
"nmap <leader>rr :action RenameElement<cr>
"nmap <Leader>r :action RenameElement<CR>
"nmap <leader>rI :action OptimizeImports<cr>
" Inspection
"nmap <leader>rc :action InspectCode<cr>

" Pretty print code
"nmap == :action ReformatCode<cr>

" Switches between .cc and .h file!
" nmap <leader>s :action GotoRelated<cr>

" File members
"nmap <leader>M :action ActivateStructureToolWindow<cr>
"nmap <leader>t :action ExpressionTypeInfo<cr>

" Usages
"nmap <leader>u :action FindUsages<cr>

" Bookmarks
"nmap <leader>b :action ShowBookmarks<cr>

" Breadcrumbs (TODO: Maybe move to idea standard keybindings..doesn't work)
"nmap <leader>b :action EditorToggleShowBreadcrumbs

" Use leader key sequences to access IDE commands
"nmap <leader>a :action $SelectAll<CR>
"nmap <leader>b :action GotoDeclaration<CR>
"nmap <leader>c :action $Copy<CR>
"nmap <leader>d :action EditorDuplicate<CR>
"nmap <leader>e :action RecentFiles<CR>
"nmap <leader>f :action Find<CR>
"nmap <leader>g :action GotoLine<CR>
"nmap <leader>h :action TypeHierarchy<CR>
"nmap <leader>i :action ImplementMethods<CR>
"nmap <leader>j :action
"nmap <leader>k :action
"nmap <leader>l :action
"nmap <leader>m :action EditorScrollToCenter<CR>
"nmap <leader>n :action FileChooser.NewFolder<CR>
"nmap <leader>n :action SearchEverywhere<CR>
"nmap <leader>o :action OverrideMethods<CR>
"nmap <leader>p :action ParameterInfo<CR>
"nmap <leader>q :action QuickJavaDoc<CR>
"nmap <leader>r :action Replace<CR>
"nmap <leader>s :action SaveAll<CR>
"nmap <leader>t :action Vcs.UpdateProject<CR>
"nmap <leader>u :action GotoSuperMethod<CR>
"nmap <leader>v :action $Paste<CR>
"nmap <leader>w :action EditorSelectWord<CR>
"nmap <leader>x :action $Cut<CR>
"nmap <leader>y :action EditorDeleteLine<CR>
"nmap <leader>z :action
"nmap <leader>[ :action EditorCodeBlockStart<CR>
"nmap <leader>] :action EditorCodeBlockEnd<CR>
"nmap <leader>\ :action

" ================================================
" VIM key notation:

" Key modifiers
" <C-?>          Control key plus some key
" <S-?>          Shift key plus some key
" <M-?> or <A-?> Alt key plus some key

" Special keys
" <BS>           Backspace
" <Tab>          Tab
" <CR>           Enter
" <Enter>        Enter
" <Return>       Enter
" <Esc>          Escape
" <Space>        Space
" <Up>           Up arrow
" <Down>         Down arrow
" <Left>         Left arrow
" <Right>        Right arrow
" <F1> - <F12>   Function keys 1 to 12
" #1, #2..#9,#0  Function keys F1 to F9, F10
" <Insert>       Insert
" <Del>          Delete
" <Home>         Home
" <End>          End
" <PageUp>       Page-Up
" <PageDown>     Page-Down
" <bar>          the '|' character, which otherwise needs to be escaped '\|'
